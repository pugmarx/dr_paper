name: Generate and Deploy Website

on:
  # Run on schedule (daily at 6 AM UTC)
  schedule:
    - cron: '0 6 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run on pushes to main branch
  push:
    branches: [ main ]
    paths:
      - 'src/notion_to_website.py'
      - 'docs/**'
      - '.github/workflows/**'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Generate papers data from Notion
      env:
        NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      run: |
        echo "[INFO] Fetching papers from Notion database..."
        python src/notion_to_website.py
        
        # Verify the output
        if [ -f "docs/papers.json" ]; then
          echo "[SUCCESS] papers.json generated successfully"
          echo "[INFO] File size: $(du -h docs/papers.json | cut -f1)"
          echo "[INFO] First few lines of generated file:"
          head -20 docs/papers.json
        else
          echo "[ERROR] papers.json was not generated"
          exit 1
        fi
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v4
      with:
        # Upload docs directory
        path: './docs'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
    
    - name: Post-deployment verification
      run: |
        echo "[SUCCESS] Deployment completed!"
        echo "[INFO] Website URL: ${{ steps.deployment.outputs.page_url }}"
        echo "[INFO] Check your papers at: ${{ steps.deployment.outputs.page_url }}"
        
        # Optional: Test the deployed JSON endpoint
        sleep 10  # Wait for deployment to propagate
        curl -f "${{ steps.deployment.outputs.page_url }}papers.json" > /dev/null && echo "[SUCCESS] papers.json is accessible" || echo "[WARNING] papers.json may not be ready yet"