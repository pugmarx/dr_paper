#!/bin/bash

# Research Paper RAG Wrapper Script with Notion Integration
# Usage: ./doctor_paper [options] <pdf_file> [custom_query]
#        ./doctor_paper --fetch-notion

set -e

# Default configuration
DEFAULT_MODEL="llama3.1:8b"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RAG_SCRIPT="$SCRIPT_DIR/src/research_paper_rag.py"
FETCH_NOTION_SCRIPT="$SCRIPT_DIR/src/fetch_and_notion.py"
VENV_PATH="$SCRIPT_DIR/.agentic"
REQUIREMENTS_FILE="$SCRIPT_DIR/requirements.txt"

# Initialize flags
FETCH_NOTION=false

# Default prompts
BLOG_PROMPT="You are writing for a technical blog audience. Summarize this research paper in a clear, engaging way.

    Structure your response as:
    1. What problem does this solve? (1-2 sentences)
    2. Key innovation or approach (2-3 sentences)
    3. Why it matters / Impact (2-5 sentences)

    Write in an accessible but technical tone. Avoid jargon when possible. The response should have headings as listed above prefixed and suffixed with '***'"

SUMMARY_PROMPT="Provide a comprehensive summary of this research paper including:
    - Main research question and motivation
    - Methodology and approach
    - Key findings and results
    - Limitations and future work
    - Significance to the field"

TECHNICAL_PROMPT="Analyze this research paper from a technical perspective:
    - What are the core technical contributions?
    - How does the methodology work?
    - What are the experimental setup and evaluation metrics?
    - What are the technical limitations?"

COMPARE_PROMPT="Compare this research paper to existing work in the field:
    - What previous work does it build upon?
    - How does it differ from or improve upon existing approaches?
    - What are the claimed advantages over related work?"

# Function to ensure virtual environment exists and is properly set up
ensure_venv() {
    echo "Checking virtual environment setup..."
    
    # Check for python3
    if ! command -v python3 &> /dev/null; then
        echo "Error: python3 is not installed"
        exit 1
    fi
    
    # Create virtual environment if it doesn't exist
    if [[ ! -d "$VENV_PATH" ]]; then
        echo "Creating virtual environment: $VENV_PATH"
        python3 -m venv "$VENV_PATH" || {
            echo "Error: Failed to create virtual environment"
            echo "Please ensure python3-venv is installed:"
            echo "sudo apt-get install python3-venv  # For Ubuntu/Debian"
            echo "sudo dnf install python3-venv      # For Fedora"
            exit 1
        }
        echo "[+] Virtual environment created"
    else
        echo "[+] Virtual environment found"
    fi
    
    # Activate the virtual environment
    echo "Activating virtual environment..."
    if [[ -f "$VENV_PATH/bin/activate" ]]; then
        source "$VENV_PATH/bin/activate"
    else
        echo "Error: Virtual environment activation script not found"
        echo "Try removing the .agentic directory and running again"
        exit 1
    fi
    
    # Check if requirements need to be installed/updated
    if [[ -f "$REQUIREMENTS_FILE" ]]; then
        echo "Installing/updating requirements..."
        # Ensure pip is up to date, but suppress upgrade message
        "$VENV_PATH/bin/python" -m pip install --upgrade pip > /dev/null 2>&1
        
        # Install requirements with progress but minimal output
        echo "Installing required packages..."
        if ! "$VENV_PATH/bin/pip" install -r "$REQUIREMENTS_FILE"; then
            echo "[x] Failed to install requirements"
            echo "Error details:"
            "$VENV_PATH/bin/pip" install -r "$REQUIREMENTS_FILE"
            exit 1
        fi
        echo "[+] Requirements installed successfully"
    else
        echo "[!] Requirements file not found: $REQUIREMENTS_FILE"
        echo "Expected at: $REQUIREMENTS_FILE"
        exit 1
    fi
    
    echo ">> Environment ready!"
    echo ""
}

# Function to run the fetch and notion pipeline
run_fetch_notion_pipeline() {
    echo "Running Paper Fetch and Notion Pipeline"
    echo "======================================"
    
    # Check if the fetch_and_notion script exists
    if [[ ! -f "$FETCH_NOTION_SCRIPT" ]]; then
        echo "Error: Fetch and Notion script not found: $FETCH_NOTION_SCRIPT"
        exit 1
    fi
    
    # Check for .env file
    if [[ ! -f "$SCRIPT_DIR/.env" ]]; then
        echo "[!] .env file not found"
        echo "Please create a .env file with:"
        echo "  NOTION_TOKEN=your_notion_token"
        echo "  NOTION_DATABASE_ID=your_database_id"
        echo ""
    fi
    
    # Run the fetch and notion script
    echo "Starting pipeline..."
    python "$FETCH_NOTION_SCRIPT"
}

# Enhanced usage function
usage() {
    cat << EOF
Research Paper RAG Tool with Notion Integration

Usage: 
    # Analyze a single PDF
    $0 [OPTIONS] <pdf_file> [custom_query]
    
    # Run full paper fetch and Notion pipeline
    $0 --fetch-notion

This script automatically sets up the .agentic virtual environment and installs dependencies.

OPTIONS:
    -m, --model MODEL       Specify the model to use (default: $DEFAULT_MODEL)
    -p, --prompt TYPE       Use predefined prompt type:
                              blog     - Blog-style summary (default)
                              summary  - Comprehensive summary
                              tech     - Technical analysis
                              compare  - Comparison with existing work
    -f, --fetch-notion      Run paper fetch and Notion integration pipeline
    -h, --help             Show this help message

EXAMPLES:
    # Analyze single paper with default blog prompt
    $0 ./papers/attention.pdf
    
    # Use technical analysis prompt
    $0 -p tech ./papers/attention.pdf
    
    # Use custom model
    $0 -m llama2 ./papers/attention.pdf
    
    # Use custom query
    $0 ./papers/attention.pdf "Explain the transformer architecture in simple terms"
    
    # Run full paper fetch and Notion pipeline
    $0 --fetch-notion
    
    # Combine options for single paper
    $0 -m llama3.1:8b -p summary ./papers/attention.pdf

SETUP:
    The script will automatically:
    - Create .agentic virtual environment if needed
    - Install all requirements from requirements.txt
    - Set up the environment for both single paper analysis and batch processing

EOF
}

# Parse command line arguments
MODEL="$DEFAULT_MODEL"
PROMPT_TYPE="blog"
CUSTOM_QUERY=""
PDF_FILE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -m|--model)
            MODEL="$2"
            shift 2
            ;;
        -p|--prompt)
            PROMPT_TYPE="$2"
            shift 2
            ;;
        -f|--fetch-notion)
            FETCH_NOTION=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
        *)
            if [[ -z "$PDF_FILE" ]]; then
                PDF_FILE="$1"
            elif [[ -z "$CUSTOM_QUERY" ]]; then
                CUSTOM_QUERY="$1"
            else
                echo "Too many arguments"
                usage
                exit 1
            fi
            shift
            ;;
    esac
done

# Always ensure virtual environment is set up first
ensure_venv

# Handle fetch-notion mode
if [[ "$FETCH_NOTION" == true ]]; then
    run_fetch_notion_pipeline
    exit 0
fi

# Validate required arguments for single paper analysis
if [[ -z "$PDF_FILE" ]]; then
    echo "Error: PDF file is required for single paper analysis"
    echo "Use --fetch-notion for batch processing, or provide a PDF file"
    echo ""
    usage
    exit 1
fi

# Check if PDF file exists
if [[ ! -f "$PDF_FILE" ]]; then
    echo "Error: PDF file '$PDF_FILE' not found"
    exit 1
fi

# Check if RAG script exists
if [[ ! -f "$RAG_SCRIPT" ]]; then
    echo "Error: RAG script '$RAG_SCRIPT' not found"
    exit 1
fi

# Select prompt based on type
if [[ -n "$CUSTOM_QUERY" ]]; then
    QUERY="$CUSTOM_QUERY"
else
    case "$PROMPT_TYPE" in
        blog)
            QUERY="$BLOG_PROMPT"
            ;;
        summary)
            QUERY="$SUMMARY_PROMPT"
            ;;
        tech)
            QUERY="$TECHNICAL_PROMPT"
            ;;
        compare)
            QUERY="$COMPARE_PROMPT"
            ;;
        *)
            echo "Error: Unknown prompt type '$PROMPT_TYPE'"
            echo "Available types: blog, summary, tech, compare"
            exit 1
            ;;
    esac
fi

# Display configuration
echo "Configuration:"
echo "   Model: $MODEL"
echo "   PDF: $PDF_FILE"
echo "   Prompt: $PROMPT_TYPE"
echo "   Python: $(which python)"
echo ""

# Run the RAG script
python "$RAG_SCRIPT" --model "$MODEL" "$PDF_FILE" "$QUERY"